#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# HUMAN TASKS:
# - Ensure Java 17 or higher is installed and JAVA_HOME is set
# - Verify network access to Maven Central Repository
# - Check write permissions in user home directory for Maven downloads
# - Ensure proper SSL certificates are installed for HTTPS downloads

# Requirement Addressed: Spring Boot 3 Migration
# Enables consistent Maven 3.9.x builds across environments required for Spring Boot 3 and Java 17 compatibility

# Use POSIX compliant shell
set -e

# Detect operating system
case "$(uname)" in
    CYGWIN*|MINGW*) cygwin=true ;;
    *) cygwin=false ;;
esac

# Find maven base directory function
find_maven_basedir() {
    local basedir=$(pwd)
    local wdir=$(pwd)
    
    # Search for pom.xml going up in directory hierarchy
    while [ "$wdir" != '/' ] ; do
        if [ -f "$wdir/pom.xml" ] ; then
            basedir=$wdir
            break
        fi
        wdir=$(cd "$wdir/.."; pwd)
    done
    echo "${basedir}"
}

# Initialize environment
init() {
    # Set Maven project base directory
    MAVEN_PROJECTBASEDIR=${MAVEN_PROJECTBASEDIR:-$(find_maven_basedir)}
    export MAVEN_PROJECTBASEDIR

    # Verify maven-wrapper.jar exists
    WRAPPER_JAR="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar"
    if [ ! -f "$WRAPPER_JAR" ]; then
        echo "Error: Maven wrapper jar not found at $WRAPPER_JAR"
        exit 1
    fi

    # Set default Maven options if not already set
    if [ -z "$MAVEN_OPTS" ]; then
        MAVEN_OPTS="-Xmx512m -XshowSettings:vm -Dfile.encoding=UTF-8"
    fi
    export MAVEN_OPTS

    # Configure logging if needed
    if [ -f "$MAVEN_PROJECTBASEDIR/mvn/logging.properties" ]; then
        MAVEN_OPTS="$MAVEN_OPTS -Djava.util.logging.config.file=$MAVEN_PROJECTBASEDIR/mvn/logging.properties"
    fi

    # Set wrapper launcher class
    WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
    export WRAPPER_LAUNCHER
}

run_maven() {
    # Add default JVM options
    MAVEN_OPTS="$MAVEN_OPTS $MAVEN_DEBUG_OPTS"

    # Determine Java command
    if [ -n "$JAVA_HOME" ] ; then
        if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
            JAVACMD="$JAVA_HOME/jre/sh/java"
        else
            JAVACMD="$JAVA_HOME/bin/java"
        fi
        if [ ! -x "$JAVACMD" ] ; then
            echo "Error: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
            exit 1
        fi
    else
        JAVACMD="java"
        which java >/dev/null 2>&1 || {
            echo "Error: JAVA_HOME is not set and java command not found in PATH"
            exit 1
        }
    fi

    # For Cygwin, switch paths to Windows format
    if $cygwin ; then
        MAVEN_PROJECTBASEDIR=$(cygpath --path --windows "$MAVEN_PROJECTBASEDIR")
        WRAPPER_JAR=$(cygpath --path --windows "$WRAPPER_JAR")
        JAVACMD=$(cygpath --unix "$JAVACMD")
    fi

    # Execute Maven with wrapper
    exec "$JAVACMD" \
         $MAVEN_OPTS \
         -classpath "$WRAPPER_JAR" \
         "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
         ${WRAPPER_LAUNCHER} "$@"
}

# Initialize environment
init

# Execute Maven with provided arguments
run_maven "$@"